#!/usr/bin/python

import argparse
import datetime
import os
import sys

parser = argparse.ArgumentParser(
    description='Combines widget.lua with a configuration in configs.  Writes '
                'the output to SCRIPTS/TELEMETRY.',
    epilog='Example: python combine.py qx7wid.lua')

parser.add_argument(
    'config_file',
    help='Name, Filename, or path of lua config file')

parser.add_argument(
    '--noheader',
    dest='header',
    action='store_false',
    help='Skip writing the "This file is generated" warning at the top of the '
         'output file')

parser.add_argument(
    '--outdir',
    default='../SCRIPTS/TELEMETRY',
    help='Destination directory for the output file')

parser.add_argument(
    '--template',
    default='widget.lua',
    help='Template widget file.')

parser.set_defaults(header=True)
args = parser.parse_args()


class Error(Exception):
  pass


def Main():
  try:
    config_path = FindConfig(args.config_file)
    Combine(
        config_path,
        FindWidgetPath(args.template),
        CreateOutPath(args.outdir, config_path),
        args.header)
  except Error, e:
    sys.exit(e)


def FindConfig(config_file):
  paths_to_try = (
      lambda p: p,
      lambda p: p + '.lua',
      lambda p: './configs/' + p,
      lambda p: './configs/' + p + '.lua'
  )

  tried = []

  for fn in paths_to_try:
    potential_path = fn(config_file)
    tried.append(potential_path)
    if os.path.exists(potential_path):
      potential_path = os.path.abspath(potential_path)
      sys.stdout.write('Config File: %s\n' % potential_path)
      return potential_path

  raise Error('Could not find the config: %s.  Tried:\n  %s' %
      (config_file, '\n  '.join(tried)))


def FindWidgetPath(template):
  if not os.path.exists(template):
    raise Error('Could not find %s' % template)
  path = os.path.abspath(template)
  sys.stdout.write('Template Path: %s\n' % path)
  return path


def CreateOutPath(outdir, config_path):
  if not os.path.exists(outdir):
    raise Error('Could not file output dir: %s' % outdir)

  if not os.path.isdir(outdir):
    raise Error('Output directory is not a directory: %s' % outdir)

  # Massage output to be the same file name as config_path
  # with any random extension turned into '.lua'
  out_name = os.path.splitext(os.path.basename(config_path))[0] + '.lua'
  out_path = os.path.join(os.path.abspath(outdir), out_name)
  sys.stdout.write('Output Path: %s\n' % out_path)
  return out_path


def Combine(config_path, widget_path, out_path, header):
  try:
    with open(out_path, 'w') as outf, open(widget_path) as widgetf:
      if header:
        WriteHeader(outf)
      FindConfigStart(widgetf, outf)
      WriteConfig(config_path, outf)
      FindConfigEnd(widgetf, outf)
      WriteEverythingElse(widgetf, outf)
      sys.stdout.write('SUCCESS\n')
  except Exception, e:
      # Cleanup any half-written files
      if os.path.exists(out_path):
        os.remove(out_path)
      raise e


def WriteHeader(outf):
  lines = (
      '-- NOTICE:',
      '--   This file was autogenerated on %s ' % datetime.datetime.now(),
      '--   with the following program: ',
      '--     %s' % ' '.join(sys.argv),
      '--',
      ''
  )
  outf.write('\n'.join(lines))


def FindConfigStart(widgetf, outf):
  for line in widgetf:
    outf.write(line)
    if 'CONFIG START' in line:
      return
  raise Error('Never found "CONFIG START" in template file')


def FindConfigEnd(widgetf, outf):
  for line in widgetf:
    if 'CONFIG END' in line:
      outf.write(line)
      return
  raise Error('Never found "CONFIG END" in template file')


def WriteEverythingElse(widgetf, outf):
  for line in widgetf:
    outf.write(line)


def WriteConfig(config_path, outf):
  outf.write('--\n\n')
  with open(config_path) as configf:
    for cline in configf:
      outf.write(cline)
  outf.write('\n--\n')


Main()
